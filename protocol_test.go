package jsonrpc2

import (
	"bufio"
	"encoding/json"
	"errors"
	"fmt"
	"net"
	"net/rpc"
	"path/filepath"
	"reflect"
	"runtime"
	"strings"
	"testing"
)

// Svc is an RPC service for testing.
type Svc struct{}

func (*Svc) Sum(vals [2]int, res *int) error {
	*res = vals[0] + vals[1]
	return nil
}

func (*Svc) Err(struct{}, *struct{}) error {
	return errors.New("some issue")
}

func (*Svc) Err2(struct{}, *struct{}) error {
	return NewError(42, "some issue")
}

func (*Svc) Err3(struct{}, *struct{}) error {
	return &Error{42, "some issue", map[string]int{"one": 1, "two": 2}}
}

func init() {
	_ = rpc.Register(&Svc{})
}

// Helpers

// caller return string which will overwrite testing.Log's caller with real one.
func caller() string {
	for skip := 1; ; skip++ {
		pc, _, _, ok := runtime.Caller(skip)
		if !ok {
			break
		}
		if strings.Index(runtime.FuncForPC(pc).Name(), ".Test") != -1 {
			return fmt.Sprintf("\r\t%*s\r\t%s: ", len(callerPos(1)), "", callerPos(skip))
		}
	}
	return ""
}

// callerPos return caller's info formatted in way used by testing.Log.
func callerPos(skip int) string {
	_, file, line, ok := runtime.Caller(1 + skip)
	if ok {
		file = filepath.Base(file)
	} else {
		file, line = "???", 1
	}
	return fmt.Sprintf("%s:%d", file, line)
}

func dump(got, want interface{}) string {
	if fmt.Sprintf("%T", got) != fmt.Sprintf("%T", want) {
		return fmt.Sprintf("exp: (%T) %#[1]v\ngot: (%T) %#[2]v\n", want, got)
	}
	return fmt.Sprintf("exp: %#v\ngot: %#v\n", want, got)
}

// testClient check output generated by client.Call().
func testClient(t *testing.T, client *rpc.Client, buf *bufio.Reader, method string, in interface{}, want string) {
	go client.Call(method, in, &struct{}{})
	got, err := buf.ReadString('\n')
	if err != nil {
		t.Fatalf("srv.Read(), err =", err)
	}
	got = strings.TrimRight(got, "\n")

	var jgot, jwant interface{}
	if err := json.Unmarshal([]byte(got), &jgot); err != nil {
		t.Errorf("%s%s(%v), output err = %v\ngot: %#q", caller(), method, in, err, got)
	}
	if err := json.Unmarshal([]byte(want), &jwant); err != nil {
		t.Errorf("%s%s(%v), expect err = %v\nexp: %#q", caller(), method, in, err, want)
	}
	if !reflect.DeepEqual(jgot, jwant) {
		t.Errorf("%s%s(%v)\nexp: %#q\ngot: %#q", caller(), method, in, want, got)
	}
}

// Tests

const (
	jerrParse     = `{"jsonrpc":"2.0","id":null,"error":{"code":-32700,"message":"Parse error"}}`
	jerrRequest   = `{"jsonrpc":"2.0","id":null,"error":{"code":-32600,"message":"Invalid request"}}`
	jerrMethodFmt = `{"jsonrpc":"2.0","id":0,"error":{"code":-32601,"message":"%s"}}`
	jerrParamsFmt = `{"jsonrpc":"2.0","id":0,"error":{"code":-32602,"message":"%s"}}`
	jres0         = `{"jsonrpc":"2.0","id":0,"result":0}`
	jres8         = `{"jsonrpc":"2.0","id":0,"result":8}`
)

func TestServerJSON(t *testing.T) {
	cases := []struct {
		in   string
		want string
	}{
		// bad JSON
		{`x`, jerrParse},
		{`{jsonrpc:"2.0"}`, jerrParse},
		// bad Request type
		{`null`, jerrRequest},
		{`true`, jerrRequest},
		{`false`, jerrRequest},
		{`42`, jerrRequest},
		{`"str"`, jerrRequest},
		{`[]`, jerrRequest},
		// Version
		{`{}`, jerrRequest},
		{`{                  "id":0,"method":"Svc.Sum","params":[[3,5]]}`, jerrRequest},
		{`{"jsonrpc":null,   "id":0,"method":"Svc.Sum","params":[[3,5]]}`, jerrRequest},
		{`{"jsonrpc":true,   "id":0,"method":"Svc.Sum","params":[[3,5]]}`, jerrRequest},
		{`{"jsonrpc":false,  "id":0,"method":"Svc.Sum","params":[[3,5]]}`, jerrRequest},
		{`{"jsonrpc":2.0,    "id":0,"method":"Svc.Sum","params":[[3,5]]}`, jerrRequest},
		{`{"jsonrpc":"2.00", "id":0,"method":"Svc.Sum","params":[[3,5]]}`, jerrRequest},
		{`{"jsonrpc":["2.0"],"id":0,"method":"Svc.Sum","params":[[3,5]]}`, jerrRequest},
		{`{"jsonrpc":{},     "id":0,"method":"Svc.Sum","params":[[3,5]]}`, jerrRequest},
		{`{"jsonrpc":"2.0",  "id":0,"method":"Svc.Sum","params":[[3,5]]}`, jres8},
		// Method type
		{`{"jsonrpc":"2.0","id":0,                     "params":[[3,5]]}`, jerrRequest},
		{`{"jsonrpc":"2.0","id":0,"method":null,       "params":[[3,5]]}`, jerrRequest},
		{`{"jsonrpc":"2.0","id":0,"method":true,       "params":[[3,5]]}`, jerrRequest},
		{`{"jsonrpc":"2.0","id":0,"method":false,      "params":[[3,5]]}`, jerrRequest},
		{`{"jsonrpc":"2.0","id":0,"method":42,         "params":[[3,5]]}`, jerrRequest},
		{`{"jsonrpc":"2.0","id":0,"method":"Svc.Sum",  "params":[[3,5]]}`, jres8},
		{`{"jsonrpc":"2.0","id":0,"method":["Svc.Sum"],"params":[[3,5]]}`, jerrRequest},
		{`{"jsonrpc":"2.0","id":0,"method":{},         "params":[[3,5]]}`, jerrRequest},
		// Params type
		{`{"jsonrpc":"2.0","id":0,"method":"Svc.Sum","params":null}`, jerrRequest},
		{`{"jsonrpc":"2.0","id":0,"method":"Svc.Sum","params":true}`, jerrRequest},
		{`{"jsonrpc":"2.0","id":0,"method":"Svc.Sum","params":false}`, jerrRequest},
		{`{"jsonrpc":"2.0","id":0,"method":"Svc.Sum","params":42}`, jerrRequest},
		{`{"jsonrpc":"2.0","id":0,"method":"Svc.Sum","params":"str"}`, jerrRequest},
		{`{"jsonrpc":"2.0","id":0,"method":"Svc.Sum"}`, jres0},
		{`{"jsonrpc":"2.0","id":0,"method":"Svc.Sum","params":[]}`, jres0},
		{`{"jsonrpc":"2.0","id":0,"method":"Svc.Sum","params":{}}`, jerrRequest},
		// Id type
		{`{"jsonrpc":"2.0",            "method":"Svc.Sum","params":[]}`, jerrRequest},
		{`{"jsonrpc":"2.0","id": true, "method":"Svc.Sum","params":[]}`, jerrRequest},
		{`{"jsonrpc":"2.0","id": false,"method":"Svc.Sum","params":[]}`, jerrRequest},
		{`{"jsonrpc":"2.0","id": [0],  "method":"Svc.Sum","params":[]}`, jerrRequest},
		{`{"jsonrpc":"2.0","id": {},   "method":"Svc.Sum","params":[]}`, jerrRequest},
		{
			`{"jsonrpc":"2.0","id":null,"method":"Svc.Sum"}`,
			`{"jsonrpc":"2.0","id":null,"result":0}`,
		},
		{
			`{"jsonrpc":"2.0","id":1,"method":"Svc.Sum"}`,
			`{"jsonrpc":"2.0","id":1,"result":0}`,
		},
		{
			`{"jsonrpc":"2.0","id":"str", "method":"Svc.Sum"}`,
			`{"jsonrpc":"2.0","id":"str","result":0}`,
		},
		// bad case
		{`{"JSONRPC":"2.0","id":0,"method":"Svc.Sum","params":[]}`, jerrRequest},
		{`{"jsonrpc":"2.0","ID":0,"method":"Svc.Sum","params":[]}`, jerrRequest},
		{`{"jsonrpc":"2.0","id":0,"METHOD":"Svc.Sum","params":[]}`, jerrRequest},
		{`{"jsonrpc":"2.0","id":0,"method":"Svc.Sum","PARAMS":[]}`, jerrRequest},
		// extra key
		{`{"jsonrpc":"2.0","method":"Svc.Sum","extra":[]}`, jerrRequest},
		{`{"jsonrpc":"2.0","extra":0,"method":"Svc.Sum","params":[]}`, jerrRequest},
		{`{"jsonrpc":"2.0","id":0,"method":"Svc.Sum","extra":[]}`, jerrRequest},
		{`{"jsonrpc":"2.0","id":0,"method":"Svc.Sum","params":[],"extra":[]}`, jerrRequest},
		// default Error.Code
		{
			`{"jsonrpc":"2.0","id":1,"method":"Svc.Err","params":[]}`,
			`{"jsonrpc":"2.0","id":1,"error":{"code":-32000,"message":"some issue"}}`,
		},
		// user-provided Error.Code
		{
			`{"jsonrpc":"2.0","id":2,"method":"Svc.Err2","params":[]}`,
			`{"jsonrpc":"2.0","id":2,"error":{"code":42,"message":"some issue"}}`,
		},
		// Error.Data
		{
			`{"jsonrpc":"2.0","id":2,"method":"Svc.Err3","params":[]}`,
			`{"jsonrpc":"2.0","id":2,"error":{"code":42,"message":"some issue","data":{"one":1,"two":2}}}`,
		},
		// net/rpc-generated errors
		{
			`{"jsonrpc":"2.0","id":0,"method":"","params":[]}`,
			fmt.Sprintf(jerrMethodFmt, "rpc: service/method request ill-formed: "),
		},
		{
			`{"jsonrpc":"2.0","id":0,"method":"Sum","params":[]}`,
			fmt.Sprintf(jerrMethodFmt, "rpc: service/method request ill-formed: Sum"),
		},
		{
			`{"jsonrpc":"2.0","id":0,"method":"Bad.Sum","params":[]}`,
			fmt.Sprintf(jerrMethodFmt, "rpc: can't find service Bad.Sum"),
		},
		{
			`{"jsonrpc":"2.0","id":0,"method":"Svc.Bad","params":[]}`,
			fmt.Sprintf(jerrMethodFmt, "rpc: can't find method Svc.Bad"),
		},
		{
			`{"jsonrpc":"2.0","id":0,"method":"Svc.Sum","params":[{}]}`,
			fmt.Sprintf(jerrParamsFmt, "json: cannot unmarshal object into Go value of type [2]int"),
		},
	}

	for _, c := range cases {
		cli, srv := net.Pipe()
		defer cli.Close()
		go ServeConn(srv)
		buf := bufio.NewReader(cli)

		_, err := cli.Write([]byte(c.in + "\n"))
		if err != nil {
			t.Errorf("send err = %v\nsent: %#q", err, c.in)
			continue
		}
		got, err := buf.ReadString('\n')
		if err != nil {
			var jin interface{}
			if err2 := json.Unmarshal([]byte(c.in), &jin); err2 != nil {
				t.Errorf("input err = %v", err2)
			}
			t.Errorf("recv err = %v\nsent: %#q", err, c.in)
			continue
		}
		got = strings.TrimRight(got, "\n")

		var jgot, jwant interface{}
		if err := json.Unmarshal([]byte(got), &jgot); err != nil {
			t.Errorf("output err = %v\nsent: %#q\nrecv: %#q", err, c.in, got)
		}
		if err := json.Unmarshal([]byte(c.want), &jwant); err != nil {
			t.Errorf("expect err = %v\nsent: %#q\nwant: %#q", err, c.in, c.want)
		}
		if !reflect.DeepEqual(jgot, jwant) {
			t.Errorf("\nsent: %#q\nwant: %#q\nrecv: %#q", c.in, c.want, got)
		}
	}
}

func TestClientResponse(t *testing.T) {
	var errBadResponseFmt = NewError(-32603, "bad response: %s")
	cases := []*struct {
		in      string
		want    float64
		wanterr *Error
	}{
		// smoke
		{jres0, 0.0, nil},
		// bad JSON
		{`x`, 0.0, NewError(-32603, "invalid character 'x' looking for beginning of value")},
		{`{jsonrpc:"2.0"}`, 0.0, NewError(-32603, "invalid character 'j' looking for beginning of object key string")},
		// bad Response type
		{`null`, 0.0, errBadResponseFmt},
		{`true`, 0.0, errBadResponseFmt},
		{`false`, 0.0, errBadResponseFmt},
		{`42`, 0.0, errBadResponseFmt},
		{`"str"`, 0.0, errBadResponseFmt},
		{`[]`, 0.0, errBadResponseFmt},
		// Version
		{`{}`, 0.0, errBadResponseFmt},
		{`{                  "id":0,"result":0}`, 0.0, errBadResponseFmt},
		{`{"jsonrpc":null,   "id":0,"result":0}`, 0.0, errBadResponseFmt},
		{`{"jsonrpc":true,   "id":0,"result":0}`, 0.0, errBadResponseFmt},
		{`{"jsonrpc":false,  "id":0,"result":0}`, 0.0, errBadResponseFmt},
		{`{"jsonrpc":2.0,    "id":0,"result":0}`, 0.0, errBadResponseFmt},
		{`{"jsonrpc":"2.00", "id":0,"result":0}`, 0.0, errBadResponseFmt},
		{`{"jsonrpc":["2.0"],"id":0,"result":0}`, 0.0, errBadResponseFmt},
		{`{"jsonrpc":{},     "id":0,"result":0}`, 0.0, errBadResponseFmt},
		// Id type
		{`{"jsonrpc":"2.0","id":null, "result":0}`, 0.0, errBadResponseFmt},
		{jerrParse, 0.0, errParse},
		{`{"jsonrpc":"2.0","id":true, "result":0}`, 0.0, errBadResponseFmt},
		{`{"jsonrpc":"2.0","id":false,"result":0}`, 0.0, errBadResponseFmt},
		{`{"jsonrpc":"2.0","id":"0",  "result":0}`, 0.0, errBadResponseFmt},
		{`{"jsonrpc":"2.0","id":[0],  "result":0}`, 0.0, errBadResponseFmt},
		{`{"jsonrpc":"2.0","id":{},   "result":0}`, 0.0, errBadResponseFmt},
		// Result type
		{`{"jsonrpc":"2.0","id":0}`, 0.0, errBadResponseFmt},
		{`{"jsonrpc":"2.0","id":0,"result":0,"error":{"code":0,"message":""}}`, 0.0, errBadResponseFmt},
		{`{"jsonrpc":"2.0","id":0,"result":null}`, 0.0, nil},
		{
			`{"jsonrpc":"2.0","id":0,"result":true}`,
			0.0, NewError(errInternal.Code, "json: cannot unmarshal bool into Go value of type float64"),
		},
		{
			`{"jsonrpc":"2.0","id":0,"result":false}`,
			0.0, NewError(errInternal.Code, "json: cannot unmarshal bool into Go value of type float64"),
		},
		{`{"jsonrpc":"2.0","id":0,"result":0}`, 0.0, nil},
		{
			`{"jsonrpc":"2.0","id":0,"result":"0"}`,
			0.0, NewError(errInternal.Code, "json: cannot unmarshal string into Go value of type float64"),
		},
		{
			`{"jsonrpc":"2.0","id":0,"result":[0]}`,
			0.0, NewError(errInternal.Code, "json: cannot unmarshal array into Go value of type float64"),
		},
		{
			`{"jsonrpc":"2.0","id":0,"result":{}}`,
			0.0, NewError(errInternal.Code, "json: cannot unmarshal object into Go value of type float64"),
		},
		// Error type
		{`{"jsonrpc":"2.0","id":0,"error":null}`, 0.0, errBadResponseFmt},
		{`{"jsonrpc":"2.0","id":0,"error":true}`, 0.0, errBadResponseFmt},
		{`{"jsonrpc":"2.0","id":0,"error":false}`, 0.0, errBadResponseFmt},
		{`{"jsonrpc":"2.0","id":0,"error":0}`, 0.0, errBadResponseFmt},
		{`{"jsonrpc":"2.0","id":0,"error":"0"}`, 0.0, errBadResponseFmt},
		{`{"jsonrpc":"2.0","id":0,"error":[]}`, 0.0, errBadResponseFmt},
		{`{"jsonrpc":"2.0","id":0,"error":{}}`, 0.0, errBadResponseFmt},
		{`{"jsonrpc":"2.0","id":0,"error":{"code":null, "message":""}}`, 0.0, errBadResponseFmt},
		{`{"jsonrpc":"2.0","id":0,"error":{"code":true, "message":""}}`, 0.0, errBadResponseFmt},
		{`{"jsonrpc":"2.0","id":0,"error":{"code":false,"message":""}}`, 0.0, errBadResponseFmt},
		{`{"jsonrpc":"2.0","id":0,"error":{"code":-1,    "message":""}}`, 0.0, NewError(-1, "")},
		{`{"jsonrpc":"2.0","id":0,"error":{"code":"0",  "message":""}}`, 0.0, errBadResponseFmt},
		{`{"jsonrpc":"2.0","id":0,"error":{"code":[0],  "message":""}}`, 0.0, errBadResponseFmt},
		{`{"jsonrpc":"2.0","id":0,"error":{"code":{},   "message":""}}`, 0.0, errBadResponseFmt},
		{`{"jsonrpc":"2.0","id":0,"error":{"code":0,"message":null}}`, 0.0, errBadResponseFmt},
		{`{"jsonrpc":"2.0","id":0,"error":{"code":0,"message":true}}`, 0.0, errBadResponseFmt},
		{`{"jsonrpc":"2.0","id":0,"error":{"code":0,"message":false}}`, 0.0, errBadResponseFmt},
		{`{"jsonrpc":"2.0","id":0,"error":{"code":0,"message":0}}`, 0.0, errBadResponseFmt},
		{`{"jsonrpc":"2.0","id":0,"error":{"code":0,"message":""}}`, 0.0, NewError(0, "")},
		{`{"jsonrpc":"2.0","id":0,"error":{"code":0,"message":[]}}`, 0.0, errBadResponseFmt},
		{`{"jsonrpc":"2.0","id":0,"error":{"code":0,"message":{}}}`, 0.0, errBadResponseFmt},
		{`{"jsonrpc":"2.0","id":0,"error":{"code":0,"message":"","data":null}}`, 0.0, NewError(0, "")},
		{`{"jsonrpc":"2.0","id":0,"error":{"code":0,"message":"","data":"str"}}`, 0.0, &Error{0, "", "str"}},
		{`{"jsonrpc":"2.0","id":0,"error":{"code":0,"message":"","data":["str"]}}`, 0.0, &Error{0, "", []interface{}{"str"}}},
		// bad case
		{`{"JSONRPC":"2.0","id":0,"error":{"code":0,"message":"","data":""}}`, 0.0, errBadResponseFmt},
		{`{"jsonrpc":"2.0","ID":0,"error":{"code":0,"message":"","data":""}}`, 0.0, errBadResponseFmt},
		{`{"jsonrpc":"2.0","id":0,"ERROR":{"code":0,"message":"","data":""}}`, 0.0, errBadResponseFmt},
		{`{"jsonrpc":"2.0","id":0,"error":{"CODE":0,"message":"","data":""}}`, 0.0, errBadResponseFmt},
		{`{"jsonrpc":"2.0","id":0,"error":{"code":0,"MESSAGE":"","data":""}}`, 0.0, errBadResponseFmt},
		{`{"jsonrpc":"2.0","id":0,"error":{"code":0,"message":"","DATA":""}}`, 0.0, errBadResponseFmt},
		// extra key
		{`{"jsonrpc":"2.0","id":0,"error":{"code":0,"message":"","extra":null}}`, 0.0, errBadResponseFmt},
		{`{"jsonrpc":"2.0","id":0,"error":{"code":0,"message":""},"extra":null}`, 0.0, errBadResponseFmt},
	}
	for _, c := range cases {
		if c.wanterr == errBadResponseFmt {
			c.wanterr = NewError(errBadResponseFmt.Code, fmt.Sprintf(errBadResponseFmt.Message, c.in))
		}
	}
	for _, c := range cases {
		cli, srv := net.Pipe()
		defer srv.Close()
		client := NewClient(cli)
		defer client.Close()
		buf := bufio.NewReader(srv)

		go func() {
			buf.ReadString('\n')
			if _, err := srv.Write([]byte(c.in + "\n")); err != nil {
				t.Errorf("send err = %v\nsent: %#q", err, c.in)
			}
		}()

		var got float64
		err := client.Call("method", nil, &got)
		if err == nil && c.wanterr != nil || err != nil && (c.wanterr == nil || !reflect.DeepEqual(ServerError(err), c.wanterr)) {
			t.Errorf("err = %v, wanterr = %v", err, c.wanterr)
		}
		if !reflect.DeepEqual(got, c.want) {
			t.Errorf("\n%s", dump(got, c.want))
		}
	}
}

// TODO test for rpc.ErrShutdown && io.ErrUnexpectedEOF

func TestClientRequest(t *testing.T) {
	cases := []struct {
		method string
		in     interface{}
		want   string
	}{
		{
			"Svc.Sum", [2]int{3, 5},
			`{"jsonrpc":"2.0","id":0,"method":"Svc.Sum","params":[[3,5]]}`,
		},
		{
			"Svc.Err", struct{}{},
			`{"jsonrpc":"2.0","id":0,"method":"Svc.Err","params":[{}]}`,
		},
		{
			"Svc.Err", nil,
			`{"jsonrpc":"2.0","id":0,"method":"Svc.Err","params":[null]}`,
		},
		{
			"", "",
			`{"jsonrpc":"2.0","id":0,"method":"","params":[""]}`,
		},
	}

	for _, c := range cases {
		cli, srv := net.Pipe()
		defer srv.Close()
		client := NewClient(cli)
		defer client.Close()
		buf := bufio.NewReader(srv)

		testClient(t, client, buf, c.method, c.in, c.want)
	}
}

func TestClientRequest_multi(t *testing.T) {
	cases := []struct {
		method string
		in     [2]int
		want   string
	}{
		{"Svc.Sum", [2]int{3, 5}, `{"jsonrpc":"2.0","id":0,"method":"Svc.Sum","params":[[3,5]]}`},
		{"Svc.Err", [2]int{0, 0}, `{"jsonrpc":"2.0","id":1,"method":"Svc.Err","params":[[0,0]]}`},
		{"Svc.Sum", [2]int{3, 5}, `{"jsonrpc":"2.0","id":2,"method":"Svc.Sum","params":[[3,5]]}`},
	}

	cli, srv := net.Pipe()
	defer srv.Close()
	client := NewClient(cli)
	defer client.Close()
	buf := bufio.NewReader(srv)

	for _, c := range cases {
		testClient(t, client, buf, c.method, c.in, c.want)
	}
}

func TestCall(t *testing.T) {
	cases := []struct {
		method  string
		in      interface{}
		want    interface{}
		wanterr *Error
	}{
		{"Svc.Sum", nil, 0.0, nil},
		{"Svc.Sum", [2]int{}, 0.0, nil},
		{"Svc.Sum", [2]int{3, 5}, 8.0, nil},
		{"Svc.Sum", [2]int{-3, 5}, 2.0, nil},

		{"Svc.Err", struct{}{}, struct{}{}, NewError(-32000, "some issue")},
		{"Svc.Err", nil, struct{}{}, NewError(-32000, "some issue")},
		{"Svc.Err", 0, struct{}{}, NewError(-32602, "json: cannot unmarshal number into Go value of type struct {}")},

		{"Svc.Err2", nil, struct{}{}, NewError(42, "some issue")},
	}

	for _, c := range cases {
		cli, srv := net.Pipe()
		go ServeConn(srv)
		client := NewClient(cli)
		defer client.Close()

		got := reflect.Zero(reflect.TypeOf(c.want)).Interface()
		err := client.Call(c.method, c.in, &got)
		if err == nil && c.wanterr != nil || err != nil && (c.wanterr == nil || *ServerError(err) != *c.wanterr) {
			t.Errorf("%s(%v), err = %v, wanterr = %v", c.method, c.in, err, c.wanterr)
		}
		if !reflect.DeepEqual(got, c.want) {
			t.Errorf("%s(%v)\n%s", c.method, c.in, dump(got, c.want))
		}
	}
}
